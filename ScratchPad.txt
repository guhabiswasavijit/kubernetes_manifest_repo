		//Process process = Runtime.getRuntime().exec(String.format("cmd.exe /c %s","kubectl get nodes -o JSON > D:\\DEPLOYMENTS\\output.json"));
	    //Process process = Runtime.getRuntime().exec("kubectl get nodes -o JSON > D:\\DEPLOYMENTS\\output.json");
		ProcessBuilder builder = new ProcessBuilder();
		builder.command("cmd.exe", "/c", "kubectl get nodes -o JSON");
		builder.directory(new File(System.getProperty("user.home")));
		Process process = builder.start();
        try {
        	StreamGobbler streamGobbler = new StreamGobbler(process.getInputStream(), System.out::println);
            Executors.newSingleThreadExecutor().submit(streamGobbler);
        	int exitCode = process.waitFor();
        	System.out.println("Process exited "+exitCode);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		package org.self.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
import lombok.extern.slf4j.Slf4j;

@Configuration
@EnableWebSecurity
@Slf4j
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	@Autowired
	private UserDetailsService userDetailsService;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {  //.addFilterBefore(authenticationFilter(), UsernamePasswordAuthenticationFilter.class)
		httpSecurity
		  .authorizeRequests()
          .antMatchers("/login*","/css/**","/js/**","/registration").permitAll()
          .anyRequest().authenticated()
	      .and()
	      .formLogin()
	      .loginPage("/login")
	      .usernameParameter("username")
	      .passwordParameter("password")
	      .failureUrl("/login?error=true")
	      .failureHandler(failureHandler())
	      .defaultSuccessUrl("/welcome")
	      .successHandler(successHandler())
	      .and()
	      .logout()
	      .logoutUrl("/perform_logout")
	      .deleteCookies("JSESSIONID")
	      .logoutSuccessHandler(logoutSuccessHandler())
	      .and()
          .sessionManagement()
		  .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
       log.debug("Http Security {}",httpSecurity.toString());
	}
	public SimpleAuthenticationFilter authenticationFilter() throws Exception {
	    SimpleAuthenticationFilter filter = new SimpleAuthenticationFilter();
	    filter.setAuthenticationManager(authenticationManagerBean());
	    return filter;
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(authProvider());
    }

    public DaoAuthenticationProvider authProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder);
        return provider;
    }

    public AuthenticationFailureHandler failureHandler() {
        return new CustomAuthenticationFailureHandler();
    }
	@Override
    public void configure(WebSecurity web) {
		web.ignoring().antMatchers("/resources/**", "/static/**");
    }

	@Bean
    public LogoutSuccessHandler logoutSuccessHandler() {
        return new CustomLogoutSuccessHandler();
    }
	@Bean
    public AuthenticationSuccessHandler successHandler() {
        return new CustomAuthenticationSuccessHandler();
    }
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}
}

public SimpleAuthenticationFilter authenticationFilter() throws Exception {
	    SimpleAuthenticationFilter filter = new SimpleAuthenticationFilter();
	    filter.setAuthenticationManager(authenticationManagerBean());
	    return filter;
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(authProvider());
    }

    public DaoAuthenticationProvider authProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder);
        return provider;
    }