docker build -f Dockerfile -t spring-boot-jwt:1.0.0 .


docker tag spring-boot-jwt:1.0.0 avijit1979/spring-boot-jwt:1.0.0
docker push avijit1979/spring-boot-jwt:1.0.0

docker network create -d bridge app-tier

docker run -rm -d -e MYSQL_ROOT_PASSWORD=Swam2@mysql --name mysqldb -p 3306:3306 mysql:latest

docker exec -it mysqldb bash
docker exec -it elasticsearch bash


docker tag mysql:demo avijit1979/mysql:ubuntu
docker push avijit1979/elasticsearch:7.5.2

docker login -u avijit1979
DockerHubAccessToken:034bc7bc-7251-4ba8-a639-7e4201d6196d

docker-compose down
docker rm -f $(docker ps -a -q)
docker volume rm $(docker volume ls -q)
docker-compose up -d
docker system prune --volumes -a
systemctl enable docker.service
systemctl enable containerd.service

docker build -f Dockerfile -t debian-elasticsearch7:1.0.0 .
docker tag debian-elasticsearch7:1.0.0 avijit1979/debian-elasticsearch7:1.0.0
docker push avijit1979/debian-elasticsearch7:1.0.0

docker build -f Dockerfile -t fluentd-mongodb:1.0.0 .
docker tag fluentd-mongodb:1.0.0 avijit1979/fluentd-mongodb:1.0.0
docker push avijit1979/fluentd-mongodb:1.0.0

docker run -name elasticsearch -d docker.elastic.co/elasticsearch/elasticsearch:8.1.3-amd64

docker build -f Dockerfile -t elasticsearch:8.1.9-custom .
docker tag elasticsearch:8.1.9-custom avijit1979/elasticsearch:8.1.9-custom
docker push avijit1979/elasticsearch:8.1.9-custom
docker network create -d bridge kibana-net


docker run --name elasticsearch --net kibana-net -ti -p 9200:9200 -p 9300:9300 -v /usr/share/elasticsearch/data -e node.name=es01 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.5.2
docker run --name kibana --net elasticsearch_elastic -ti -p 5601:5601 -e SERVER_NAME=kibana.example.org -e ELASTICSEARCH_HOSTS=http://elasticsearch:9200  docker.elastic.co/kibana/kibana:7.5.2

docker commit ff058c0a93fe  avijit1979/elasticsearch:7.5.3
docker run --name elasticsearch --net kibana-net -ti -p 9200:9200 -p 9300:9300 -v /usr/share/elasticsearch/data -e "discovery.type=single-node" avijit1979/elasticsearch:7.5.3

docker build -f Dockerfile -t ubuntu-elasticsearch8:1.0.0 .
RUN wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
RUN echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
RUN apt-get update && apt-get install elasticsearch
RUN chmod +x $ELASTICSEARCH_HOME/bin/elasticSearchSetup.sh

RUN   echo -ne \
  "instances:\n"\
  "  - name: es01\n"\
  "    dns:\n"\
  "      - es01\n"\
  "      - localhost\n"\
  "    ip:\n"\
  "      - 127.0.0.1\n"\
  >> touch config/certs/instances.yml
RUN ./elasticSearchSetup.sh

docker run --name mongodb -v D:\workspace\manifest:/etc/mongo -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret123 -d mongo:focal

db.system.users.find({},{_id:1,roles:1})
mongo --host 127.0.0.1 -u mongoadmin -p secret123 --authenticationDatabase admin fluentld
db.createCollection("kubelog", { capped : true, size : 6142800, max : 10000 } )
show collections

docker commit mongodb  avijit1979/mongodb:1.0.0
docker run --name mongodb -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret123 -d avijit1979/mongodb:1.0.0
docker run --name spring-pdf --rm -e LOG_DIR=/var/log -e OUTPUT_DIR=/opt/JavaApps/ -d spring-boot-pdf:1.0.0
